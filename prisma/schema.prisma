generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Clients {
    id          String        @id @default(uuid()) @map("_id")
    companyName String // Nombre de la empresa
    email       String        @unique
    password    String
    contacts    Contact[] // Lista de contactos adicionales
    logoCompany String? // URL del logo de la empresa
    apps        AppDevelop[] // Relación con las aplicaciones desarrolladas para este cliente
    reports     ReportIssue[] // Relación con los reportes de errores realizados por este cliente
    apiKeys     ApiKey[] // Relación con las API Keys del cliente
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model Contact {
    id       String  @id @default(uuid()) @map("_id")
    name     String // Nombre del contacto
    phone    String // Teléfono del contacto
    mail     String // Correo electrónico del contacto
    clientId String // Relación con el cliente al que pertenece
    client   Clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model AppDevelop {
    id            String        @id @default(uuid()) @map("_id")
    name          String // Nombre de la aplicación
    description   String? // Descripción de la aplicación
    status        StatusApp     @default(inDevelopment) // Estado de la aplicación
    repositoryUrl String? // URL del repositorio de código
    deploymentUrl String? // URL de la aplicación desplegada
    clientId      String // ID del cliente que solicitó la aplicación
    client        Clients       @relation(fields: [clientId], references: [id])
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    reports       ReportIssue[] // Relación con los reportes de errores
    apiKeys       ApiKey[] // Relación opcional con las API Keys usadas en la aplicación
}

model ApiKey {
    id          String       @id @default(uuid()) @map("_id")
    key         String       @unique // La clave de API generada
    status      ApiKeyStatus @default(active) // Estado de la clave API
    title       String
    description String?
    clientId    String // Relación con el cliente que posee la clave
    client      Clients      @relation(fields: [clientId], references: [id])
    appId       String? // Relación opcional con una aplicación en particular
    app         AppDevelop?  @relation(fields: [appId], references: [id])
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model ReportIssue {
    id          String         @id @default(uuid()) @map("_id")
    description String // Descripción detallada del error
    images      String[] // URLs de las imágenes que el cliente sube para describir el error
    status      StatusIssue    @default(open) // Estado del reporte de error
    priority    PriorityStatus @default(low) // Prioridad del reporte de error
    appId       String // ID de la aplicación relacionada con el reporte
    app         AppDevelop     @relation(fields: [appId], references: [id])
    clientId    String // ID del cliente que reporta el error
    client      Clients        @relation(fields: [clientId], references: [id])
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

// Enum para el estado del reporte de error
enum StatusIssue {
    open
    inProgress
    resolved
    closed
}

// Enum para el estado de la aplicación
enum StatusApp {
    inDevelopment
    completed
    maintenance
    cancelled
}

// Enum para la prioridad del reporte de error
enum PriorityStatus {
    low
    medium
    high
    critical
}

// Enum para el estado de la clave API
enum ApiKeyStatus {
    active // La clave está activa y puede ser usada
    revoked // La clave ha sido revocada y no es válida
    expired // La clave ha caducado
}
